import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Paths

plugins {
    id 'java'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.35'
}

version = project.mod_version
group = 'com.teamwizardry'

def tokens = [VERSION: version]
def included = ['com/teamwizardry/wizardry/Wizardry.java']

def expandedSrc = new File(project.buildDir, 'expandedSrc')
def srcMainJava = project.file('src/main/java').toPath()
def includedPaths = included.collect { Paths.get(it) }
task javaReplaceTokens(type: Copy) {
    inputs.property 'tokens', tokens
    from(srcMainJava) {
        include included
    }
    into expandedSrc
    filter(ReplaceTokens, beginToken: '@', endToken: '@', tokens: tokens)
}

compileJava {
    dependsOn javaReplaceTokens
    exclude {
        srcMainJava.relativize(it.file.toPath()) in includedPaths
    }
    source expandedSrc
}

java {
    archivesBaseName = 'wizardry'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

minecraft {
    mcVersion = "1.12.2"
    username = 'Developer'
    extraRunJvmArguments.addAll('-Xms128m', '-Xmx2048m')
    useDependencyAccessTransformers = true
}

//minecraft {
//    mappings channel: 'stable', version: '39-1.12'
//    accessTransformer = file('src/main/resources/dev_ats.cfg')
//    runs {
//        client {
//            workingDirectory project.file('run')
//
//            property 'forge.logging.markers', 'REGISTRIES'
//            property 'forge.logging.console.level', 'debug'
//            property 'fml.coreMods.load', 'com.teamwizardry.librarianlib.asm.LibLibCorePlugin'
//
//            mods {
//                wizardry {
//                    source sourceSets.main
//                }
//            }
//        }
//
//        server {
//            workingDirectory project.file('run')
//
//            property 'forge.logging.markers', 'REGISTRIES'
//            property 'forge.logging.console.level', 'debug'
//            property 'fml.coreMods.load', 'com.teamwizardry.librarianlib.asm.LibLibCorePlugin'
//
//            mods {
//                wizardry {
//                    source sourceSets.main
//                }
//            }
//        }
//    }
//}

apply from: 'dependencies.gradle'

for (File at : sourceSets.getByName("main").resources.files) {
    if (at.name.toLowerCase().endsWith("_at.cfg")) {
        tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
        tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
    }
}

jar {
    manifest {
        attributes(
                "FMLCorePluginContainsFMLMod": "true",
                "FMLCorePlugin": "$core_plugin"
        )
    }
    exclude 'wizardry_at.cfg'
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        fcd.expand (
                'mod_version': project.version,
                'mc_version': project.minecraft.version
        )
    }

    rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
}
